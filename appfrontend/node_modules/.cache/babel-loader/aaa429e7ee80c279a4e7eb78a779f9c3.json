{"ast":null,"code":"import { initializeApp } from \"firebase/app\";\nimport { getAuth, createUserWithEmailAndPassword, sendPasswordResetEmail, signInWithEmailAndPassword, signInWithPopup, GoogleAuthProvider } from \"firebase/auth\";\nimport './Firebase.css';\nconst firebaseConfig = {\n  apiKey: `${process.env.REACT_APP_FIREBASE_API_KEY}`,\n  authDomain: `${process.env.REACT_APP_FIREBASE_AUTH_DOMAIN}`,\n  projectId: `${process.env.REACT_APP_FIREBASE_PROJECT_ID}`,\n  storageBucket: `${process.env.REACT_APP_FIREBASE_STORAGE_BUCKET}`,\n  messagingSenderId: `${process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID}`,\n  appId: `${process.env.REACT_APP_FIREBASE_APP_ID}`,\n  measurementId: `${process.env.REACT_APP_FIREBASE_MEASURENENT_ID}`\n};\nconst provider = new GoogleAuthProvider();\nprovider.addScope('https://www.googleapis.com/auth/contacts.readonly');\nprovider.setCustomParameters({\n  'login_hint': 'user@example.com'\n}); // Initialize Firebase\n\ninitializeApp(firebaseConfig);\nconst auth = getAuth();\n\nconst registerWithEmailAndPassword = (email, password) => {\n  createUserWithEmailAndPassword(auth, email, password).then(userCredential => {// Signed in \n    //const user = userCredential.user;\n    // ...\n  }).catch(error => {\n    //const errorCode = error.code;\n    //const errorMessage = error.message;\n    alert(error.message); // ..\n  });\n};\n\nconst resetPassword = (email, handleError, handleSuccess) => {\n  try {\n    sendPasswordResetEmail(auth, email).then(() => {\n      // Password reset email sent!\n      // ..\n      handleSuccess(\"Reset Sent\");\n      console.log(\"Reset sent\");\n    }).catch(error => {\n      handleError(error.message); // ..\n    });\n  } catch (err) {\n    console.error(err);\n    alert(err.message);\n  }\n};\n\nconst signInWithGoogle = (setLogin, setHasError, setErrors) => {\n  setLogin(true);\n  signInWithPopup(auth, provider).then(result => {\n    // This gives you a Google Access Token. You can use it to access the Google API.\n    //const credential = GoogleAuthProvider.credentialFromResult(result);\n    //const token = credential.accessToken;\n    // The signed-in user info.\n    //const user = result.user;\n    // ...\n    setLogin(false);\n  }).catch(error => {\n    // Handle Errors here.\n    //const errorCode = error.code;\n    //const errorMessage = error.message;\n    // The email of the user's account used.\n    //const email = error.email;\n    // The AuthCredential type that was used.\n    //const credential = GoogleAuthProvider.credentialFromError(error);\n    // ...\n    setHasError(true);\n    setErrors(error.message);\n    setLogin(false);\n  });\n};\n\nconst signInEmailAndPassword = (email, password, setLogin, setHasError, setErrors) => {\n  setLogin(true);\n  signInWithEmailAndPassword(auth, email, password).then(userCredential => {\n    // Signed in \n    //const user = userCredential.user;\n    //const token = userCredential.accessToken;\n    // The signed-in user info.\n    //localStorage.setItem('user', JSON.stringify(user));\n    // ...\n    setLogin(false);\n  }).catch(error => {\n    //const errorCode = error.code;\n    //const errorMessage = error.message;\n    setHasError(true);\n    setErrors(error.message);\n    setLogin(false);\n  });\n};\n\nconst logout = () => {\n  auth.signOut();\n};\n\nexport { auth, registerWithEmailAndPassword, resetPassword, signInWithGoogle, logout, signInEmailAndPassword };","map":{"version":3,"sources":["C:/Users/FABIARIAS/Desktop/Mintech.3-Mern/appfrontend/src/components/Firebase.js"],"names":["initializeApp","getAuth","createUserWithEmailAndPassword","sendPasswordResetEmail","signInWithEmailAndPassword","signInWithPopup","GoogleAuthProvider","firebaseConfig","apiKey","process","env","REACT_APP_FIREBASE_API_KEY","authDomain","REACT_APP_FIREBASE_AUTH_DOMAIN","projectId","REACT_APP_FIREBASE_PROJECT_ID","storageBucket","REACT_APP_FIREBASE_STORAGE_BUCKET","messagingSenderId","REACT_APP_FIREBASE_MESSAGING_SENDER_ID","appId","REACT_APP_FIREBASE_APP_ID","measurementId","REACT_APP_FIREBASE_MEASURENENT_ID","provider","addScope","setCustomParameters","auth","registerWithEmailAndPassword","email","password","then","userCredential","catch","error","alert","message","resetPassword","handleError","handleSuccess","console","log","err","signInWithGoogle","setLogin","setHasError","setErrors","result","signInEmailAndPassword","logout","signOut"],"mappings":"AAAA,SAASA,aAAT,QAA8B,cAA9B;AACA,SAASC,OAAT,EAAkBC,8BAAlB,EAAkDC,sBAAlD,EAA0EC,0BAA1E,EAAsGC,eAAtG,EAAuHC,kBAAvH,QAAiJ,eAAjJ;AACA,OAAO,gBAAP;AAEA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,MAAM,EAAG,GAAEC,OAAO,CAACC,GAAR,CAAYC,0BAA2B,EAD7B;AAErBC,EAAAA,UAAU,EAAG,GAAEH,OAAO,CAACC,GAAR,CAAYG,8BAA+B,EAFrC;AAGrBC,EAAAA,SAAS,EAAG,GAAEL,OAAO,CAACC,GAAR,CAAYK,6BAA8B,EAHnC;AAIrBC,EAAAA,aAAa,EAAG,GAAEP,OAAO,CAACC,GAAR,CAAYO,iCAAkC,EAJ3C;AAKrBC,EAAAA,iBAAiB,EAAG,GAAET,OAAO,CAACC,GAAR,CAAYS,sCAAuC,EALpD;AAMrBC,EAAAA,KAAK,EAAG,GAAEX,OAAO,CAACC,GAAR,CAAYW,yBAA0B,EAN3B;AAOrBC,EAAAA,aAAa,EAAG,GAAEb,OAAO,CAACC,GAAR,CAAYa,iCAAkC;AAP3C,CAAvB;AAUA,MAAMC,QAAQ,GAAG,IAAIlB,kBAAJ,EAAjB;AACAkB,QAAQ,CAACC,QAAT,CAAkB,mDAAlB;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AAC3B,gBAAc;AADa,CAA7B,E,CAIA;;AACA1B,aAAa,CAACO,cAAD,CAAb;AACA,MAAMoB,IAAI,GAAG1B,OAAO,EAApB;;AAEA,MAAM2B,4BAA4B,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AACxD5B,EAAAA,8BAA8B,CAACyB,IAAD,EAAOE,KAAP,EAAcC,QAAd,CAA9B,CACGC,IADH,CACSC,cAAD,IAAoB,CACxB;AACA;AACA;AACD,GALH,EAMGC,KANH,CAMUC,KAAD,IAAW;AAChB;AACA;AACAC,IAAAA,KAAK,CAACD,KAAK,CAACE,OAAP,CAAL,CAHgB,CAKhB;AACD,GAZH;AAcD,CAfD;;AAgBA,MAAMC,aAAa,GAAG,CAACR,KAAD,EAAQS,WAAR,EAAoBC,aAApB,KAAsC;AAC1D,MAAI;AACFpC,IAAAA,sBAAsB,CAACwB,IAAD,EAAOE,KAAP,CAAtB,CACGE,IADH,CACQ,MAAM;AACV;AACA;AACAQ,MAAAA,aAAa,CAAC,YAAD,CAAb;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACD,KANH,EAOGR,KAPH,CAOUC,KAAD,IAAW;AAChBI,MAAAA,WAAW,CAACJ,KAAK,CAACE,OAAP,CAAX,CADgB,CAEhB;AACD,KAVH;AAWD,GAZD,CAYE,OAAOM,GAAP,EAAY;AACZF,IAAAA,OAAO,CAACN,KAAR,CAAcQ,GAAd;AACAP,IAAAA,KAAK,CAACO,GAAG,CAACN,OAAL,CAAL;AACD;AACF,CAjBD;;AAmBA,MAAMO,gBAAgB,GAAG,CAACC,QAAD,EAAWC,WAAX,EAAuBC,SAAvB,KAAqC;AAC5DF,EAAAA,QAAQ,CAAC,IAAD,CAAR;AACAvC,EAAAA,eAAe,CAACsB,IAAD,EAAOH,QAAP,CAAf,CACGO,IADH,CACSgB,MAAD,IAAY;AAChB;AACA;AACA;AACA;AACA;AACA;AACAH,IAAAA,QAAQ,CAAC,KAAD,CAAR;AACD,GATH,EASKX,KATL,CASYC,KAAD,IAAW;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAW,IAAAA,WAAW,CAAC,IAAD,CAAX;AACAC,IAAAA,SAAS,CAACZ,KAAK,CAACE,OAAP,CAAT;AACAQ,IAAAA,QAAQ,CAAC,KAAD,CAAR;AACD,GArBH;AAsBD,CAxBD;;AA0BA,MAAMI,sBAAsB,GAAG,CAACnB,KAAD,EAAQC,QAAR,EAAiBc,QAAjB,EAA0BC,WAA1B,EAAsCC,SAAtC,KAAoD;AACjFF,EAAAA,QAAQ,CAAC,IAAD,CAAR;AACAxC,EAAAA,0BAA0B,CAACuB,IAAD,EAAOE,KAAP,EAAcC,QAAd,CAA1B,CACGC,IADH,CACSC,cAAD,IAAoB;AACxB;AACA;AACA;AACA;AACA;AAGA;AACAY,IAAAA,QAAQ,CAAC,KAAD,CAAR;AACD,GAXH,EAYGX,KAZH,CAYUC,KAAD,IAAW;AAChB;AACA;AACAW,IAAAA,WAAW,CAAC,IAAD,CAAX;AACAC,IAAAA,SAAS,CAACZ,KAAK,CAACE,OAAP,CAAT;AACAQ,IAAAA,QAAQ,CAAC,KAAD,CAAR;AACD,GAlBH;AAqBD,CAvBD;;AA0BA,MAAMK,MAAM,GAAG,MAAM;AACnBtB,EAAAA,IAAI,CAACuB,OAAL;AACD,CAFD;;AAGA,SACEvB,IADF,EAEEC,4BAFF,EAGES,aAHF,EAIEM,gBAJF,EAKEM,MALF,EAMED,sBANF","sourcesContent":["import { initializeApp } from \"firebase/app\";\nimport { getAuth, createUserWithEmailAndPassword, sendPasswordResetEmail, signInWithEmailAndPassword, signInWithPopup, GoogleAuthProvider } from \"firebase/auth\";\nimport './Firebase.css';\n\nconst firebaseConfig = {\n  apiKey: `${process.env.REACT_APP_FIREBASE_API_KEY}`,\n  authDomain: `${process.env.REACT_APP_FIREBASE_AUTH_DOMAIN}`,\n  projectId: `${process.env.REACT_APP_FIREBASE_PROJECT_ID}`,\n  storageBucket: `${process.env.REACT_APP_FIREBASE_STORAGE_BUCKET}`,\n  messagingSenderId: `${process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID}`,\n  appId: `${process.env.REACT_APP_FIREBASE_APP_ID}`,\n  measurementId: `${process.env.REACT_APP_FIREBASE_MEASURENENT_ID}`\n};\n\nconst provider = new GoogleAuthProvider();\nprovider.addScope('https://www.googleapis.com/auth/contacts.readonly');\nprovider.setCustomParameters({\n  'login_hint': 'user@example.com'\n});\n\n// Initialize Firebase\ninitializeApp(firebaseConfig);\nconst auth = getAuth();\n\nconst registerWithEmailAndPassword = (email, password) => {\n  createUserWithEmailAndPassword(auth, email, password)\n    .then((userCredential) => {\n      // Signed in \n      //const user = userCredential.user;\n      // ...\n    })\n    .catch((error) => {\n      //const errorCode = error.code;\n      //const errorMessage = error.message;\n      alert(error.message);\n\n      // ..\n    });\n\n};\nconst resetPassword = (email, handleError,handleSuccess) => {\n  try {\n    sendPasswordResetEmail(auth, email)\n      .then(() => {\n        // Password reset email sent!\n        // ..\n        handleSuccess(\"Reset Sent\");\n        console.log(\"Reset sent\");\n      })\n      .catch((error) => {\n        handleError(error.message);\n        // ..\n      });\n  } catch (err) {\n    console.error(err);\n    alert(err.message);\n  }\n};\n\nconst signInWithGoogle = (setLogin, setHasError,setErrors) => {\n  setLogin(true);\n  signInWithPopup(auth, provider)\n    .then((result) => {\n      // This gives you a Google Access Token. You can use it to access the Google API.\n      //const credential = GoogleAuthProvider.credentialFromResult(result);\n      //const token = credential.accessToken;\n      // The signed-in user info.\n      //const user = result.user;\n      // ...\n      setLogin(false);\n    }).catch((error) => {\n      // Handle Errors here.\n      //const errorCode = error.code;\n      //const errorMessage = error.message;\n      // The email of the user's account used.\n      //const email = error.email;\n      // The AuthCredential type that was used.\n      //const credential = GoogleAuthProvider.credentialFromError(error);\n      // ...\n      setHasError(true);\n      setErrors(error.message);\n      setLogin(false);\n    });\n}\n\nconst signInEmailAndPassword = (email, password,setLogin,setHasError,setErrors) => {\n  setLogin(true);\n  signInWithEmailAndPassword(auth, email, password)\n    .then((userCredential) => {\n      // Signed in \n      //const user = userCredential.user;\n      //const token = userCredential.accessToken;\n      // The signed-in user info.\n      //localStorage.setItem('user', JSON.stringify(user));\n\n\n      // ...\n      setLogin(false);\n    })\n    .catch((error) => {\n      //const errorCode = error.code;\n      //const errorMessage = error.message;\n      setHasError(true);\n      setErrors(error.message);\n      setLogin(false);\n    });\n\n\n};\n\n\nconst logout = () => {\n  auth.signOut();\n};\nexport {\n  auth,\n  registerWithEmailAndPassword,\n  resetPassword,\n  signInWithGoogle,\n  logout,\n  signInEmailAndPassword\n};\n"]},"metadata":{},"sourceType":"module"}